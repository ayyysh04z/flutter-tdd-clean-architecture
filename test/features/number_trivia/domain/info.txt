Domain is the inner layer which shouldn't be susceptible to the whims of changing data sources or porting our app to Angular Dart. 
It will contain only the core business logic (use cases) and business objects (entities). It should be totally independent of every 
other layer.

Use Cases are classes which encapsulate all the business logic of a particular use case of the app (e.g. GetConcreteNumberTrivia 
or GetRandomNumberTrivia).

But... How is the domain layer completely independent when it gets data from a Repository, which is from the data layer?  
Do you see that fancy colorful gradient for the Repository? That signifies that it belongs to both layers at the same time.
 We can accomplish this with dependency inversion.

 Dependency inversion principle is the last of the SOLID principles. 
 It basically states that the boundaries between layers should be handled 
 with interfaces (abstract classes in Dart).