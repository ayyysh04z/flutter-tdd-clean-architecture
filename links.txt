https://resocoder.com/2019/08/27/flutter-tdd-clean-architecture-course-1-explanation-project-structure/
https://resocoder.com/2019/08/29/flutter-tdd-clean-architecture-course-2-entities-use-cases/
https://resocoder.com/2019/09/02/flutter-tdd-clean-architecture-course-3-domain-layer-refactoring/
https://resocoder.com/2019/09/09/flutter-tdd-clean-architecture-course-4-data-layer-overview-models/
https://resocoder.com/2019/09/12/flutter-tdd-clean-architecture-course-5-contracts-of-data-sources/
https://resocoder.com/2019/09/19/flutter-tdd-clean-architecture-course-6-repository-implementation/
https://resocoder.com/2019/09/23/flutter-tdd-clean-architecture-course-7-network-info/
https://resocoder.com/2019/09/26/flutter-tdd-clean-architecture-course-8-local-data-source/
https://resocoder.com/2019/10/03/flutter-tdd-clean-architecture-course-9-remote-data-source/
https://resocoder.com/2019/10/07/flutter-tdd-clean-architecture-course-10-bloc-scaffolding-input-conversion/
https://resocoder.com/2019/10/10/flutter-tdd-clean-architecture-course-11-bloc-implementation/
https://resocoder.com/2019/10/14/flutter-tdd-clean-architecture-course-11-bloc-implementation-2-2/
https://resocoder.com/2019/10/21/flutter-tdd-clean-architecture-course-13-dependency-injection-user-interface/
https://resocoder.com/2019/10/29/flutter-tdd-clean-architecture-course-14-user-interface/

SOLID : https://scribe.rip/@flutterdynasty/solid-principles-in-flutter-b868fb5ef60e
Additon : The Dependency Inversion Principle (DIP) states that high-level modules should not depend on low-level modules. Instead, both should depend on abstractions. In simpler terms, this means that the details of implementation in lower-level modules should be abstracted away, allowing higher-level modules to depend on interfaces or abstract classes rather than concrete implementations.
In the provided Flutter example, the WeatherApp high-level module depends on the WeatherService abstraction. The WeatherService is an abstract class representing a contract for fetching weather data. The concrete implementation, OpenWeatherMapService, is a low-level module that adheres to the WeatherService abstraction.
By using dependency injection (the WeatherApp constructor takes a WeatherService parameter) and abstract classes, this example achieves dependency inversion. The high-level WeatherApp module is not directly dependent on the low-level OpenWeatherMapService, but rather on the more abstract WeatherService. This design makes it easier to swap out implementations and promotes flexibility and maintainability in the codebase. 

i18n : 
https://docs.flutter.dev/ui/accessibility-and-internationalization/internationalization 
https://resocoder.com/2019/06/01/flutter-localization-the-easy-way-internationalization-with-json/
https://github.com/esskar/vscode-flutter-i18n-json

bloc boiler code :
https://github.com/fikretsengul/flutter_advanced_boilerplate

examples :
https://github.com/lambiengcode/flutter-live-stream-ui